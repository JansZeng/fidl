# Copyright 2014 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# TODO(vardhan): Currently, targets for each language bindings depend on a
# central generator target which generates bindings for /every/ language. Create
# separate generator targets for each language.
# TODO(vardhan): Currently, the compiler generates type info and calls the
# generators. Sever this, and have generators consume compiled output from an
# intermediate file.

import("build/fidl_source_set.gni")
import("//build/dart/dart_package.gni")

# Generate C++/JavaScript/Java/Python/Dart/Go source files from fidl files. The
# output files will go under the generated file directory tree with the same
# path as each input file.
#
# Parameters:
#
#   sources (optional if one of the deps sets listed below is present)
#       List of source .fidl files to compile.
#
#   deps (optional)
#       Note: this can contain only other fidl targets.
#
#   public_deps (optional)
#       Note: this can contain only other fidl targets.
#
#   import_dirs (optional)
#       List of import directories that will get added when processing sources.
#
#   testonly (optional)
#
#   visibility (optional)
template("fidl") {
  assert(
      defined(invoker.sources) || defined(invoker.deps) ||
      defined(invoker.public_deps),
      "\"sources\" or \"deps\" must be defined for the $target_name template.")

  cpp_sources_suffix = "cpp_sources"
  cpp_sources_target_name = "${target_name}_${cpp_sources_suffix}"
  cpp_sync_sources_target_name = "${target_name}_${cpp_sources_suffix}_sync"

  if (defined(invoker.sources)) {
    generator_root = rebase_path("lib/fidl/compiler/legacy_generators", ".", fidl_root)
    legacy_gen_path = rebase_path("$generator_root/legacy")
    fidl_tool = rebase_path("${root_out_dir}/fidl")

    # The following list of files will trigger a rebuild if any of them change.
    # TODO(vardhan): This should be split up to be per-language.
    generator_sources = [
      fidl_tool,
      "$generator_root/run_code_generators.py",
      "$generator_root/generators/cpp_templates/enum_macros.tmpl",
      "$generator_root/generators/cpp_templates/interface_declaration.tmpl",
      "$generator_root/generators/cpp_templates/interface_definition.tmpl",
      "$generator_root/generators/cpp_templates/interface_macros.tmpl",
      "$generator_root/generators/cpp_templates/interface_proxy_declaration.tmpl",
      "$generator_root/generators/cpp_templates/interface_request_validator_declaration.tmpl",
      "$generator_root/generators/cpp_templates/interface_response_validator_declaration.tmpl",
      "$generator_root/generators/cpp_templates/interface_stub_declaration.tmpl",
      "$generator_root/generators/cpp_templates/module-common.cc.tmpl",
      "$generator_root/generators/cpp_templates/module-common.h.tmpl",
      "$generator_root/generators/cpp_templates/module-internal.h.tmpl",
      "$generator_root/generators/cpp_templates/module-sync.cc.tmpl",
      "$generator_root/generators/cpp_templates/module-sync.h.tmpl",
      "$generator_root/generators/cpp_templates/module.cc.tmpl",
      "$generator_root/generators/cpp_templates/module.h.tmpl",
      "$generator_root/generators/cpp_templates/struct_declaration.tmpl",
      "$generator_root/generators/cpp_templates/struct_definition.tmpl",
      "$generator_root/generators/cpp_templates/struct_macros.tmpl",
      "$generator_root/generators/cpp_templates/struct_serialization_declaration.tmpl",
      "$generator_root/generators/cpp_templates/struct_serialization_definition.tmpl",
      "$generator_root/generators/cpp_templates/union_declaration.tmpl",
      "$generator_root/generators/cpp_templates/union_definition.tmpl",
      "$generator_root/generators/cpp_templates/union_serialization_declaration.tmpl",
      "$generator_root/generators/cpp_templates/union_serialization_definition.tmpl",
      "$generator_root/generators/cpp_templates/validation_macros.tmpl",
      "$generator_root/generators/cpp_templates/wrapper_class_declaration.tmpl",
      "$generator_root/generators/cpp_templates/wrapper_class_definition.tmpl",
      "$generator_root/generators/cpp_templates/wrapper_union_class_declaration.tmpl",
      "$generator_root/generators/cpp_templates/wrapper_union_class_definition.tmpl",
      "$generator_root/generators/dart_templates/encoding_macros.tmpl",
      "$generator_root/generators/dart_templates/enum_definition.tmpl",
      "$generator_root/generators/dart_templates/interface_definition.tmpl",
      "$generator_root/generators/dart_templates/module.lib.tmpl",
      "$generator_root/generators/dart_templates/module_definition.tmpl",
      "$generator_root/generators/dart_templates/struct_definition.tmpl",
      "$generator_root/generators/dart_templates/union_definition.tmpl",
      "$generator_root/generators/go_templates/encoding_macros.tmpl",
      "$generator_root/generators/go_templates/enum.tmpl",
      "$generator_root/generators/go_templates/interface.tmpl",
      "$generator_root/generators/go_templates/source.tmpl",
      "$generator_root/generators/go_templates/struct.tmpl",
      "$generator_root/generators/go_templates/union.tmpl",
      "$generator_root/generators/java_templates/constant_definition.tmpl",
      "$generator_root/generators/java_templates/constants.java.tmpl",
      "$generator_root/generators/java_templates/data_types_definition.tmpl",
      "$generator_root/generators/java_templates/enum_definition.tmpl",
      "$generator_root/generators/java_templates/enum.java.tmpl",
      "$generator_root/generators/java_templates/header.java.tmpl",
      "$generator_root/generators/java_templates/interface_definition.tmpl",
      "$generator_root/generators/java_templates/interface_internal.java.tmpl",
      "$generator_root/generators/java_templates/interface.java.tmpl",
      "$generator_root/generators/java_templates/struct.java.tmpl",
      "$generator_root/generators/java_templates/union.java.tmpl",
      "$generator_root/generators/js_templates/enum_definition.tmpl",
      "$generator_root/generators/js_templates/interface_definition.tmpl",
      "$generator_root/generators/js_templates/module.amd.tmpl",
      "$generator_root/generators/js_templates/module_definition.tmpl",
      "$generator_root/generators/js_templates/struct_definition.tmpl",
      "$generator_root/generators/js_templates/union_definition.tmpl",
      "$generator_root/generators/js_templates/validation_macros.tmpl",
      "$generator_root/generators/python_templates/module.py.tmpl",
      "$generator_root/generators/python_templates/module_macros.tmpl",
      "$generator_root/generators/mojom_cpp_generator.py",
      "$generator_root/generators/mojom_dart_generator.py",
      "$generator_root/generators/mojom_go_generator.py",
      "$generator_root/generators/mojom_js_generator.py",
      "$generator_root/generators/mojom_java_generator.py",
      "$generator_root/generators/mojom_python_generator.py",
      "$generator_root/pylib/mojom/__init__.py",
      "$generator_root/pylib/mojom/error.py",
      "$generator_root/pylib/mojom/generate/__init__.py",
      "$generator_root/pylib/mojom/generate/constant_resolver.py",
      "$generator_root/pylib/mojom/generate/generator.py",
      "$generator_root/pylib/mojom/generate/module.py",
      "$generator_root/pylib/mojom/generate/pack.py",
      "$generator_root/pylib/mojom/generate/template_expander.py",
      "$generator_root/pylib/mojom/parse/__init__.py",
      "$generator_root/pylib/mojom/parse/parser_runner.py",
    ]
    generator_cpp_outputs = [
      "{{source_gen_dir}}/{{source_file_part}}-common.cc",
      "{{source_gen_dir}}/{{source_file_part}}-common.h",
      "{{source_gen_dir}}/{{source_file_part}}-internal.h",
      "{{source_gen_dir}}/{{source_file_part}}-sync.cc",
      "{{source_gen_dir}}/{{source_file_part}}-sync.h",
      "{{source_gen_dir}}/{{source_file_part}}.h",
      "{{source_gen_dir}}/{{source_file_part}}.cc",
    ]
    generator_c_outputs = [
      "{{source_gen_dir}}/{{source_file_part}}-c.c",
      "{{source_gen_dir}}/{{source_file_part}}-c.h",
    ]
    generator_js_outputs =
        [ "{{source_gen_dir}}/{{source_file_part}}.js" ]
    generator_dart_outputs =
        [ "{{source_gen_dir}}/{{source_file_part}}.dart" ]
    generator_go_outputs = [ "${root_gen_dir}/go/src/{{source_dir}}/{{source_name_part}}/{{source_file_part}}.go" ]
    # TODO(vardhan): We can't have both .mojom and .fidl coexist because of
    # this hardcoded '_fidl' suffix. Has to do with python imports not handling
    # '.fidl/.mojom' in names. Investigate putting in a package instead.
    generator_python_outputs =
        [ "{{source_gen_dir}}/{{source_name_part}}_fidl.py" ]
    generator_java_outputs =
        [ "{{source_gen_dir}}/{{source_file_part}}.srcjar" ]
  }
  generator_python_zip_output = "$target_out_dir/${target_name}_python.pyzip"

  if (defined(invoker.sources)) {
    generator_target_name = target_name + "__generator"
    action_foreach(generator_target_name) {
      script = "/usr/bin/env"
      inputs = generator_sources
      public_deps = [
        rebase_path("lib/fidl/compiler:fidl", ".", fidl_root),
      ]
      if (defined(invoker.generate_type_info) && invoker.generate_type_info) {
        deps = [
          rebase_path("lib/fidl/compiler/interfaces:interfaces", ".", fidl_root),
        ]
      }
      sources = invoker.sources
      outputs =
          generator_cpp_outputs + generator_dart_outputs +
          generator_go_outputs + generator_java_outputs + generator_js_outputs +
          generator_python_outputs + generator_c_outputs
      args = [
        fidl_tool,
        "gen",
        "--src-root-path",
        rebase_path("//", root_build_dir),
        "-I",
        rebase_path("//", root_build_dir),
        "-I",
        rebase_path(fidl_root, root_build_dir),
        "--output-dir",
        rebase_path(root_gen_dir),
        "--no-gen-imports",
        "--generators",
        "${legacy_gen_path}",
      ]

      if (defined(invoker.generate_type_info) && invoker.generate_type_info) {
        args += [
          "--gen-arg",
          "generate-type-info",
        ]
      }

      if (defined(ignore_dart_package_annotations) && ignore_dart_package_annotations) {
        args += [
          "--gen-arg",
          "dart_ignore-package-annotations",
        ]
      }

      if (defined(invoker.import_dirs)) {
        foreach(import_dir, invoker.import_dirs) {
          args += [
            "-I",
            rebase_path(import_dir, root_build_dir),
          ]
        }
      }

      args += [ "{{source}}" ]
    }
  }

  # Some re-usable variables for the C++ source sets:
  cpp_public_deps = []
  if (defined(invoker.public_deps)) {
    cpp_public_deps += invoker.public_deps
  }
  if (defined(invoker.sources)) {
    cpp_public_deps += [ ":$generator_target_name" ]
  }
  cpp_deps = []
  if (defined(invoker.deps)) {
    cpp_deps += invoker.deps
  }

  source_set(target_name) {
    if (defined(invoker.visibility)) {
      visibility = invoker.visibility
    }
    if (defined(invoker.testonly)) {
      testonly = invoker.testonly
    }

    public_configs =
        rebase_path([ "lib/fidl/build/config:fidl_source" ], ".", fidl_root)

    public_deps =
        rebase_path([ "lib/fidl/cpp/bindings" ], ".", fidl_root)
    public_deps += cpp_public_deps
    if (defined(invoker.sources)) {
      public_deps += [ ":${cpp_sources_target_name}" ]
      data = process_file_template(invoker.sources, generator_js_outputs)
    }

    deps = cpp_deps
  }

  # This target provides C++ synchronous bindings support. The dependent may
  # also depend on the non-sync C++ bindings target.
  source_set("${target_name}_sync") {
    if (defined(invoker.visibility)) {
      visibility = invoker.visibility
    }
    if (defined(invoker.testonly)) {
      testonly = invoker.testonly
    }

    public_configs =
        rebase_path([ "lib/fidl/build/config:fidl_source" ], ".", fidl_root)

    public_deps = rebase_path([ "lib/fidl/cpp/bindings" ], ".", fidl_root)
    public_deps += cpp_public_deps
    if (defined(invoker.sources)) {
      public_deps += [ ":${cpp_sync_sources_target_name}" ]
      data = process_file_template(invoker.sources, generator_js_outputs)
    }

    deps = cpp_deps
  }

  # This target provides C++ support for serialization without requiring any
  # support from the OS. (The other C++ bindings assume message pipes, etc.)
  source_set("${target_name}_data_only") {
    if (defined(invoker.visibility)) {
      visibility = invoker.visibility
    }
    if (defined(invoker.testonly)) {
      testonly = invoker.testonly
    }

    public_configs =
        rebase_path([ "lib/fidl/build/config:fidl_source" ], ".", fidl_root)

    public_deps = rebase_path([ "lib/fidl/cpp/bindings:serialization" ],
                              ".",
                              fidl_root)
    public_deps += cpp_public_deps
    if (defined(invoker.sources)) {
      public_deps += [ ":${cpp_sources_target_name}" ]
      data = process_file_template(invoker.sources, generator_js_outputs)
    }
    deps = cpp_deps
  }

  all_deps = []
  if (defined(invoker.deps)) {
    all_deps += invoker.deps
  }
  if (defined(invoker.public_deps)) {
    all_deps += invoker.public_deps
  }

  group("${target_name}__is_fidl") {
  }

  # Explicitly ensure that all dependencies (invoker.deps and
  # invoker.public_deps) are fidl targets themselves.
  group("${target_name}__check_deps_are_all_fidl") {
    deps = []
    foreach(d, all_deps) {
      name = get_label_info(d, "label_no_toolchain")
      toolchain = get_label_info(d, "toolchain")
      deps += [ "${name}__is_fidl(${toolchain})" ]
    }
  }

  action("${target_name}_python") {
    script = rebase_path("lib/fidl/build/zip.py", ".", fidl_root)

    deps = []
    zip_inputs = []

    if (defined(invoker.sources)) {
      inputs = process_file_template(invoker.sources, generator_python_outputs)
      deps += [ ":$generator_target_name" ]
    }

    foreach(d, all_deps) {
      # Resolve the name, so that a target //mojo/something becomes
      # //mojo/something:something and we can append "_python" to get the python
      # dependency name.
      full_name = get_label_info(d, "label_no_toolchain")
      dep_name = get_label_info(d, "name")
      dep_target_out_dir = get_label_info(d, "target_out_dir")
      deps += [ "${full_name}_python" ]
      zip_inputs += [ "$dep_target_out_dir/${dep_name}_python.pyzip" ]
    }

    output = generator_python_zip_output
    outputs = [
      output,
    ]

    rebase_base_dir = rebase_path(target_gen_dir, root_build_dir)
    if (defined(invoker.sources)) {
      rebase_inputs = rebase_path(inputs, root_build_dir)
    }
    rebase_zip_inputs = rebase_path(zip_inputs, root_build_dir)
    rebase_output = rebase_path(output, root_build_dir)
    args = [
      "--base-dir=$rebase_base_dir",
      "--zip-inputs=$rebase_zip_inputs",
      "--output=$rebase_output",
    ]
    if (defined(invoker.sources)) {
      args += [ "--inputs=$rebase_inputs" ]
    }
  }

  if (defined(invoker.sources)) {
    # The generated C++ source files. The main reason to introduce this target
    # is so that lib/fidl/cpp/bindings can depend on fidl interfaces without
    # circular dependencies. It means that the target is missing the dependency
    # on lib/fidl/cpp/bindings. No external targets should depend directly on
    # this target *except* lib/fidl/cpp/bindings and other *_cpp_sources
    # targets.
    source_set(cpp_sources_target_name + "__common") {
      if (defined(invoker.testonly)) {
        testonly = invoker.testonly
      }
      sources = process_file_template(
              invoker.sources,
              [
                "{{source_gen_dir}}/{{source_file_part}}-common.cc",
                "{{source_gen_dir}}/{{source_file_part}}-common.h",
                "{{source_gen_dir}}/{{source_file_part}}-internal.h",
              ])
      public_configs =
          rebase_path([ "lib/fidl/build/config:fidl_source" ], ".", fidl_root)
      deps = [
        ":$generator_target_name",
        rebase_path( "lib/fidl/cpp/bindings" , ".", fidl_root),
        rebase_path("lib/fidl/compiler/interfaces:interfaces__generator",
                    ".",
                    fidl_root),
      ]
      foreach(d, all_deps) {
        # Resolve the name, so that a target //mojo/something becomes
        # //mojo/something:something and we can append cpp_sources_suffix to
        # get the cpp dependency name.
        full_name = get_label_info(d, "label_no_toolchain")
        deps += [ "${full_name}_${cpp_sources_suffix}" ]
      }
    }

    source_set(cpp_sources_target_name) {
      if (defined(invoker.testonly)) {
        testonly = invoker.testonly
      }
      sources = process_file_template(
              invoker.sources,
              [
                "{{source_gen_dir}}/{{source_file_part}}.h",
                "{{source_gen_dir}}/{{source_file_part}}.cc",
              ])
      public_configs =
          rebase_path([ "lib/fidl/cpp/bindings:bindings_config", "lib/fidl/build/config:fidl_source" ], ".", fidl_root)
      deps = [
        ":$generator_target_name",
        ":${cpp_sources_target_name}__common",
        rebase_path("lib/fidl/compiler/interfaces:interfaces__generator",
                    ".",
                    fidl_root),
      ]
      foreach(d, all_deps) {
        # Resolve the name, so that a target //mojo/something becomes
        # //mojo/something:something and we can append cpp_sources_suffix to
        # get the cpp dependency name.
        full_name = get_label_info(d, "label_no_toolchain")
        deps += [ "${full_name}_${cpp_sources_suffix}" ]
      }
    }

    source_set(cpp_sync_sources_target_name) {
      if (defined(invoker.testonly)) {
        testonly = invoker.testonly
      }
      sources = process_file_template(
              invoker.sources,
              [
                "{{source_gen_dir}}/{{source_file_part}}-sync.cc",
                "{{source_gen_dir}}/{{source_file_part}}-sync.h",
              ])
      public_configs =
          rebase_path([ "lib/fidl/cpp/bindings:bindings_config", "lib/fidl/build/config:fidl_source" ], ".", fidl_root)
      deps = [
        ":$generator_target_name",
        ":${cpp_sources_target_name}__common",
        rebase_path("lib/fidl/compiler/interfaces:interfaces__generator",
                    ".",
                    fidl_root),
      ]
      foreach(d, all_deps) {
        # Resolve the name, so that a target //mojo/something becomes
        # //mojo/something:something and we can append cpp_sources_suffix to
        # get the cpp dependency name.
        full_name = get_label_info(d, "label_no_toolchain")
        deps += [ "${full_name}_${cpp_sources_suffix}" ]
      }
    }
  }

  # This target is used to generate Dart package information
  dart_package("${target_name}_dart") {
    infer_package_name = true
    source_dir = target_gen_dir

    deps = []
    fidl_deps = []
    if (defined(invoker.deps)) {
      fidl_deps += invoker.deps
    }
    if (defined(invoker.public_deps)) {
      fidl_deps += invoker.public_deps
    }

    # Depend on the generated Dart package for all of our fidl dependencies.
    foreach(d, fidl_deps) {
      dep_label = get_label_info(d, "label_no_toolchain")
      deps += [ "${dep_label}_dart" ]
    }

    non_dart_deps = []
    if (defined(invoker.sources)) {
      non_dart_deps +=
          [ get_label_info(":$generator_target_name", "label_no_toolchain") ]
    }
  }
}
